{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","col","row","coords","value","color","index","indexOf","getColor","fontColor","getFontColor","react_default","a","createElement","className","concat","style","marginLeft","marginTop","backgroundColor","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMaxScore","maxScore","localStorage","getItem","setState","handleKeyPress","event","squares","state","newSquares","slice","direction","keyCode","reverseDirection","dir","rotateArray","i","max","length","fillNullLeft","toLeft","compareArrays","prevSquares","getRandomSquare","sum","values","filter","item","splice","score","array","push","rotatedArray","j","newValue","Math","floor","random","getRandomCoords","split","newCoords","nullArray","a1","a2","winner","win","loser","boardSize","countNull","lose","getInitialState","res","initialArray","square1","square2","coordsOne","coordsTwo","continued","divRef","current","focus","backToPrevState","changeSizeBoard","renderBoard","_this$state","Fragment","textAlign","Dropdown","selection","onChange","compact","options","key","text","placeholder","width","height","onKeyDown","tabIndex","ref","map","squareRow","square","src_components_Square","Header","as","inverted","Button","Group","onClick","disabled","Subheader","React","createRef","_this$state2","setItem","Component","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec9746e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Square.css';\r\n\r\nconst Square = ({ col, row, coords, value }) => {\r\n  const color = getColor(value);\r\n  const fontColor = getFontColor(value);\r\n    return (\r\n      <div className={`square ${row === +coords[0] && col === +coords[1] ? 'new': ''}`} style={{\r\n            marginLeft: col*100,\r\n            marginTop: row*100,\r\n            backgroundColor: color,\r\n            color: fontColor,\r\n          }}>\r\n        <span className='value'>{value}</span>\r\n      </div>\r\n    )\r\n}\r\n\r\nSquare.propTypes = {\r\n  col: PropTypes.number.isRequired,\r\n  row: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction getColor(value) {\r\n  const numbers = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n  const colors = ['#eee', '#eec', '#fb8','#f96','#f75','#f53','#ec7','#ec6','#ec5','#ec3','#ec2','#000','#000','#000','#000','#000'];\r\n  const index = numbers.indexOf(value);\r\n\r\n  return colors[index];\r\n}\r\n\r\nfunction getFontColor(value){\r\n  const numbers = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n  const fontColors = ['#222', '#222', '#eee','#eee','#eee','#eee','#222','#222','#222','#222','#eee','#eee','#eee','#eee',];\r\n  const index = numbers.indexOf(value);\r\n\r\n  return fontColors[index];\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\nimport './Board.css';\r\nimport {\r\n  Header,\r\n  Button,\r\n  Dropdown,\r\n} from 'semantic-ui-react';\r\n\r\nclass Board extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      squares: [],\r\n      prevSquares: [],\r\n      win: false,\r\n      lose: false,\r\n      continued: false,\r\n      score: 0,\r\n      maxScore: 0,\r\n      newCoords: [],\r\n      boardSize: 4,\r\n    };\r\n    this.divRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.divRef.current.focus();\r\n    this.getInitialState();\r\n    this.getMaxScore();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    const { squares, lose, win, score, maxScore } = this.state\r\n    if (!win) {\r\n      this.winner(squares);\r\n    }\r\n    if (!lose) {\r\n      this.loser(squares);\r\n    }\r\n    if (score > maxScore) {\r\n      localStorage.setItem('maxScore', score);\r\n      this.setState({\r\n        maxScore: score,\r\n      })\r\n    }\r\n  }\r\n\r\n  getMaxScore = () => {\r\n    const maxScore = localStorage.getItem('maxScore') || 0;\r\n\r\n    this.setState({\r\n      maxScore: maxScore,\r\n    })\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n    const { squares } = this.state;\r\n\r\n    let newSquares = squares.slice();\r\n    const direction = event.keyCode - 37;\r\n    const reverseDirection = direction === 0 ? 0 : 4 - direction;\r\n\r\n    for (let dir = 0; dir < direction; dir+=1){\r\n      newSquares = this.rotateArray(newSquares);\r\n    }\r\n\r\n    for (let i = 0, max = newSquares.length; i < max; i+=1) {\r\n      const row = this.fillNullLeft(this.toLeft(newSquares[i]), max);\r\n      newSquares[i] = row;\r\n    }\r\n\r\n    for (let dir = 0; dir < reverseDirection; dir+=1){\r\n      newSquares = this.rotateArray(newSquares);\r\n    }\r\n\r\n    if (!this.compareArrays(squares, newSquares)) {\r\n      this.setState((state) => ({\r\n          squares: newSquares,\r\n          prevSquares: squares,\r\n        }), this.getRandomSquare);\r\n    }\r\n  }\r\n\r\n  toLeft = (row) => {\r\n    let sum = 0;\r\n    const values = row.filter(item => item !== null);\r\n    if (values.length > 1) {\r\n      for (let i = 0; i < values.length; i+=1) {\r\n        if (values[i] === values[i+1]) {\r\n          values[i] = values[i] * 2;\r\n          sum+=values[i];\r\n          values.splice(i+1,1);\r\n        }\r\n      }\r\n    }\r\n    this.setState((state) => ({\r\n      score: state.score + sum,\r\n    }));\r\n    return values;\r\n  }\r\n\r\n  fillNullLeft = (array, length) => {\r\n    for (let i = 0; i < length; i+=1) {\r\n      if (!array[i]) {\r\n        array.push(null);\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  rotateArray = (array) => {\r\n    let rotatedArray = [];\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      rotatedArray[i] = [];\r\n      for (let j = 0; j < max; j+=1) {\r\n        rotatedArray[i][j] = array[j][max - i - 1];\r\n      }\r\n    }\r\n    return rotatedArray;\r\n  }\r\n\r\n  getRandomSquare = () => {\r\n    const { squares } = this.state;\r\n    let newSquares = squares.slice();\r\n    const newValue = [2,4,2,2,2][Math.floor(Math.random() * 5)];\r\n    const randomSquare = this.getRandomCoords(squares);\r\n    const coords = randomSquare.split('');\r\n    newSquares[+coords[0]][+coords[1]] = newValue;\r\n    this.setState({\r\n      squares: newSquares,\r\n      newCoords: coords,\r\n    })\r\n  }\r\n\r\n  getRandomCoords = (array) => {\r\n    let nullArray = [];\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      for (let j = 0; j < max; j+=1) {\r\n        if (!array[i][j]) {\r\n          nullArray.push(`${i}${j}`);\r\n        }\r\n      }\r\n    }\r\n    return nullArray[Math.floor(Math.random() * nullArray.length)];\r\n  }\r\n\r\n  compareArrays = (a1, a2) => {\r\n    return (!(a1 > a2 || a1 < a2));\r\n  }\r\n\r\n  winner = (array) => {\r\n    const { win } = this.state;\r\n    if (!win) {\r\n      for (let i = 0, max = array.length; i < max; i+=1) {\r\n        for (let j = 0; j < max; j+=1) {\r\n          if (array[i][j] === 2048) {\r\n            this.setState({\r\n              win: true,\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  loser = (array) => {\r\n    const { boardSize } = this.state;\r\n    let countNull = 0;\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      for (let j = 0; j < max; j+=1) {\r\n        if (!array[i][j]) {\r\n          countNull += 1;\r\n        }\r\n      }\r\n    }\r\n    if (countNull) return;\r\n      for (let i = 0, max = array.length; i < max; i+=1) {\r\n        for (let j = 0; j < max; j+=1) {\r\n          if (array[i][j] === array[i][j+1]) return;\r\n          if (i < boardSize - 1 && array[i][j] === array[i+1][j]) return;\r\n        }\r\n      }\r\n      this.setState({\r\n        lose: true,\r\n      })\r\n  }\r\n\r\n  getInitialState = () => {\r\n    const res = this.state.boardSize;\r\n    let initialArray = [];\r\n    for (let i = 0; i < res; i+=1) {\r\n      initialArray[i] = [];\r\n      for (let j = 0; j < res; j+=1) {\r\n        initialArray[i][j] = null;\r\n      }\r\n    }\r\n    let square1 = this.getRandomCoords(initialArray);\r\n    let square2 = this.getRandomCoords(initialArray);\r\n\r\n    const coordsOne = square1.split('');\r\n    const coordsTwo = square2.split('');\r\n    initialArray[+coordsOne[0]][+coordsOne[1]] = 2;\r\n    initialArray[+coordsTwo[0]][+coordsTwo[1]] = 2;\r\n\r\n    this.setState({\r\n      win: false,\r\n      lose: false,\r\n      continued: false,\r\n      prevSquares: [],\r\n      squares: initialArray,\r\n      score: 0,\r\n    });\r\n    this.divRef.current.focus();\r\n  }\r\n\r\n  backToPrevState = () => {\r\n    const { prevSquares } = this.state;\r\n\r\n    this.setState({\r\n      squares: prevSquares,\r\n      prevSquares: [],\r\n      lose: false,\r\n    });\r\n    this.divRef.current.focus();\r\n  }\r\n\r\n  changeSizeBoard = (event, {value}) => {\r\n    this.setState((state) => ({\r\n      boardSize: value,\r\n    }), this.getInitialState);\r\n  }\r\n\r\n  renderBoard = () => {\r\n    const { squares, win, lose, continued, score, maxScore, prevSquares, newCoords, boardSize } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n      <div style={{textAlign: 'center'}}>\r\n        <strong>Size:</strong>\r\n        <Dropdown\r\n          selection\r\n          onChange={this.changeSizeBoard}\r\n          compact\r\n          options={[\r\n            {key: '3', value: 3, text: '3x3'},\r\n            {key: '4', value: 4, text: '4x4'},\r\n            {key: '5', value: 5, text: '5x5'},\r\n            {key: '6', value: 6, text: '6x6'}]}\r\n          placeholder='4x4'\r\n        />\r\n      </div>\r\n      <div\r\n        className='board'\r\n        style={{width: boardSize * 100, height: boardSize * 100}}\r\n        onKeyDown={this.handleKeyPress}\r\n        tabIndex=\"0\"\r\n        ref={this.divRef}\r\n        >\r\n        {\r\n          squares.map((squareRow, row) => {\r\n            return squareRow.map((square, col) => {\r\n                return (\r\n                  <Square\r\n                    key={`${row}-${col}`}\r\n                    row={row}\r\n                    col={col}\r\n                    value={square}\r\n                    coords={newCoords}\r\n                  />\r\n                );\r\n\r\n            })\r\n          })\r\n        }\r\n        {\r\n          win && !continued && (\r\n            <div className='modal'>\r\n              <div className='modal_center'>\r\n                <Header as='h2' inverted>Вы победили!</Header>\r\n                <Button.Group>\r\n                <Button\r\n                  inverted\r\n                  color='orange'\r\n                  onClick={() => this.getInitialState()}\r\n                >\r\n                  С начала\r\n                </Button>\r\n                <Button\r\n                  inverted\r\n                  color='olive'\r\n                  onClick={() => {\r\n                      this.setState((state) => ({continued: true}));\r\n                      this.divRef.current.focus();\r\n                    }\r\n                  }\r\n                >\r\n                  Продолжить\r\n                </Button>\r\n                </Button.Group>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        {\r\n          lose && (\r\n            <div className='modal'>\r\n              <div className='modal_center'>\r\n                <Header as='h2' inverted>Вы проиграли!</Header>\r\n                <Button\r\n                  inverted\r\n                  color='orange'\r\n                  onClick={() => {\r\n                      this.getInitialState();\r\n                    }\r\n                  }\r\n                >\r\n                  С начала\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      <div style={{textAlign: 'center', marginTop: '10px'}}>\r\n        <Button\r\n          onClick={this.backToPrevState}\r\n          disabled={!prevSquares.length}\r\n        >\r\n          Шаг назад\r\n        </Button>\r\n        <Header color='orange' as='h2'>Your Score: {score}\r\n        <Header.Subheader>Max Score: {maxScore}</Header.Subheader>\r\n        </Header>\r\n      </div>\r\n    </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render(){\r\n      return this.renderBoard();\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\nimport Board from './components/Board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Board/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}