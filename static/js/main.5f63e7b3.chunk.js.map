{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","console","log","_this$props","this","props","col","row","coords","value","color","index","indexOf","getColor","fontColor","getFontColor","react_default","a","createElement","className","concat","style","marginLeft","marginTop","backgroundColor","React","Component","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getMaxScore","maxScore","localStorage","getItem","setState","handleKeyPress","event","squares","state","newSquares","slice","direction","keyCode","reverseDirection","dir","rotateArray","i","max","length","fillNullLeft","toLeft","compareArrays","prevSquares","getRandomSquare","sum","values","filter","item","splice","score","array","push","rotatedArray","j","newValue","Math","floor","random","getRandomCoords","split","newCoords","nullArray","a1","a2","winner","win","loser","countNull","lose","getInitialState","res","initialArray","square1","square2","coordsOne","coordsTwo","continued","divRef","current","focus","backToPrevState","renderBoard","_this$state","Fragment","onKeyDown","tabIndex","ref","map","squareRow","square","src_components_Square","key","Header","as","inverted","Button","Group","onClick","textAlign","disabled","Subheader","createRef","_this$state2","setItem","App","src_components_Board","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f63e7b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Square.css';\r\n\r\nclass Square extends React.Component {\r\n  componentWillUnmount(){\r\n    console.log('unmount')\r\n  }\r\n\r\n  render() {\r\n  const { col, row, coords, value } = this.props\r\n  const color = getColor(value);\r\n  const fontColor = getFontColor(value);\r\n    return (\r\n      <div className={`square ${row === +coords[0] && col === +coords[1] ? 'new': ''}`} style={{\r\n            marginLeft: col*100,\r\n            marginTop: row*100,\r\n            backgroundColor: color,\r\n            color: fontColor,\r\n          }}>\r\n        <span className='value'>{value}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSquare.propTypes = {\r\n  col: PropTypes.number.isRequired,\r\n  row: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction getColor(value) {\r\n  const numbers = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n  const colors = ['#eee', '#eec', '#fb8','#f96','#f75','#f53','#ec7','#ec6','#ec5','#ec3','#ec2','#000','#000','#000','#000','#000'];\r\n  const index = numbers.indexOf(value);\r\n\r\n  return colors[index];\r\n}\r\n\r\nfunction getFontColor(value){\r\n  const numbers = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384];\r\n  const fontColors = ['#222', '#222', '#eee','#eee','#eee','#eee','#222','#222','#222','#222','#eee','#eee','#eee','#eee',];\r\n  const index = numbers.indexOf(value);\r\n\r\n  return fontColors[index];\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from 'react';\r\nimport Square from './Square';\r\nimport './Board.css';\r\nimport {\r\n  Header,\r\n  Button,\r\n} from 'semantic-ui-react';\r\n\r\nclass Board extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      squares: [],\r\n      prevSquares: [],\r\n      win: false,\r\n      lose: false,\r\n      continued: false,\r\n      score: 0,\r\n      maxScore: 0,\r\n      newCoords: [],\r\n    };\r\n    this.divRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.divRef.current.focus();\r\n    this.getInitialState();\r\n    this.getMaxScore();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    const { squares, lose, win, score, maxScore } = this.state\r\n    if (!win) {\r\n      this.winner(squares);\r\n    }\r\n    if (!lose) {\r\n      this.loser(squares);\r\n    }\r\n    if (score > maxScore) {\r\n      localStorage.setItem('maxScore', score);\r\n      this.setState({\r\n        maxScore: score,\r\n      })\r\n    }\r\n  }\r\n\r\n  getMaxScore = () => {\r\n    const maxScore = localStorage.getItem('maxScore') || 0;\r\n\r\n    this.setState({\r\n      maxScore: maxScore,\r\n    })\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n    const { squares } = this.state;\r\n\r\n    let newSquares = squares.slice();\r\n    const direction = event.keyCode - 37;\r\n    const reverseDirection = direction === 0 ? 0 : 4 - direction;\r\n\r\n    for (let dir = 0; dir < direction; dir+=1){\r\n      newSquares = this.rotateArray(newSquares);\r\n    }\r\n\r\n    for (let i = 0, max = newSquares.length; i < max; i+=1) {\r\n      const row = this.fillNullLeft(this.toLeft(newSquares[i]), max);\r\n      newSquares[i] = row;\r\n    }\r\n\r\n    for (let dir = 0; dir < reverseDirection; dir+=1){\r\n      newSquares = this.rotateArray(newSquares);\r\n    }\r\n\r\n    if (!this.compareArrays(squares, newSquares)) {\r\n      this.setState((state) => ({\r\n          squares: newSquares,\r\n          prevSquares: squares,\r\n        }), this.getRandomSquare);\r\n    }\r\n  }\r\n\r\n  toLeft = (row) => {\r\n    let sum = 0;\r\n    const values = row.filter(item => item !== null);\r\n    if (values.length > 1) {\r\n      for (let i = 0; i < values.length; i+=1) {\r\n        if (values[i] === values[i+1]) {\r\n          values[i] = values[i] * 2;\r\n          sum+=values[i];\r\n          values.splice(i+1,1);\r\n        }\r\n      }\r\n    }\r\n    this.setState((state) => ({\r\n      score: state.score + sum,\r\n    }));\r\n    return values;\r\n  }\r\n\r\n  fillNullLeft = (array, length) => {\r\n    for (let i = 0; i < length; i+=1) {\r\n      if (!array[i]) {\r\n        array.push(null);\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  rotateArray = (array) => {\r\n    let rotatedArray = [];\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      rotatedArray[i] = [];\r\n      for (let j = 0; j < max; j+=1) {\r\n        rotatedArray[i][j] = array[j][max - i - 1];\r\n      }\r\n    }\r\n    return rotatedArray;\r\n  }\r\n\r\n  getRandomSquare = () => {\r\n    const { squares } = this.state;\r\n    let newSquares = squares.slice();\r\n    const newValue = [2,4,2,2,2][Math.floor(Math.random() * 5)];\r\n    const randomSquare = this.getRandomCoords(squares);\r\n    const coords = randomSquare.split('');\r\n    newSquares[+coords[0]][+coords[1]] = newValue;\r\n    this.setState({\r\n      squares: newSquares,\r\n      newCoords: coords,\r\n    })\r\n  }\r\n\r\n  getRandomCoords = (array) => {\r\n    let nullArray = [];\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      for (let j = 0; j < max; j+=1) {\r\n        if (!array[i][j]) {\r\n          nullArray.push(`${i}${j}`);\r\n        }\r\n      }\r\n    }\r\n    return nullArray[Math.floor(Math.random() * nullArray.length)];\r\n  }\r\n\r\n  compareArrays = (a1, a2) => {\r\n    return (!(a1 > a2 || a1 < a2));\r\n  }\r\n\r\n  winner = (array) => {\r\n    const { win } = this.state;\r\n    if (!win) {\r\n      for (let i = 0, max = array.length; i < max; i+=1) {\r\n        for (let j = 0; j < max; j+=1) {\r\n          if (array[i][j] === 2048) {\r\n            this.setState({\r\n              win: true,\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  loser = (array) => {\r\n    let countNull = 0;\r\n    for (let i = 0, max = array.length; i < max; i+=1) {\r\n      for (let j = 0; j < max; j+=1) {\r\n        if (!array[i][j]) {\r\n          countNull += 1;\r\n        }\r\n      }\r\n    }\r\n    if (countNull) return;\r\n      for (let i = 0, max = array.length; i < max; i+=1) {\r\n        for (let j = 0; j < max; j+=1) {\r\n          if (array[i][j] === array[i][j+1]) return;\r\n          if (i < 3 && array[i][j] === array[i+1][j]) return;\r\n        }\r\n      }\r\n      this.setState({\r\n        lose: true,\r\n      })\r\n  }\r\n\r\n  getInitialState = (res) => {\r\n    res = res || 4;\r\n    let initialArray = [];\r\n    for (let i = 0; i < res; i+=1) {\r\n      initialArray[i] = [];\r\n      for (let j = 0; j < res; j+=1) {\r\n        initialArray[i][j] = null;\r\n      }\r\n    }\r\n    let square1 = this.getRandomCoords(initialArray);\r\n    let square2 = this.getRandomCoords(initialArray);\r\n\r\n    if (square1 === square2) {\r\n      this.setState({\r\n        score: 0,\r\n        win: false,\r\n        lose: false,\r\n        continued: false,\r\n        prevSquares: [],\r\n        squares: [[null,null,null,null],[null,2,null,null],[null,null,null,2],[null,null,null,null]]\r\n      });\r\n      return;\r\n    }\r\n    const coordsOne = square1.split('');\r\n    const coordsTwo = square2.split('');\r\n    initialArray[+coordsOne[0]][+coordsOne[1]] = 2;\r\n    initialArray[+coordsTwo[0]][+coordsTwo[1]] = 2;\r\n\r\n    this.setState({\r\n      win: false,\r\n      lose: false,\r\n      continued: false,\r\n      prevSquares: [],\r\n      squares: initialArray,\r\n      score: 0,\r\n    });\r\n    this.divRef.current.focus();\r\n  }\r\n\r\n  backToPrevState = () => {\r\n    const { prevSquares } = this.state;\r\n\r\n    this.setState({\r\n      squares: prevSquares,\r\n      prevSquares: [],\r\n      lose: false,\r\n    });\r\n    this.divRef.current.focus();\r\n  }\r\n\r\n  renderBoard = () => {\r\n    const { squares, win, lose, continued, score, maxScore, prevSquares, newCoords } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n      <div\r\n        className='board'\r\n        onKeyDown={this.handleKeyPress}\r\n        tabIndex=\"0\"\r\n        ref={this.divRef}\r\n        >\r\n        {\r\n          squares.map((squareRow, row) => {\r\n            return squareRow.map((square, col) => {\r\n                return (\r\n                  <Square\r\n                    key={`${row}-${col}`}\r\n                    row={row}\r\n                    col={col}\r\n                    value={square}\r\n                    coords={newCoords}\r\n                  />\r\n                );\r\n\r\n            })\r\n          })\r\n        }\r\n        {\r\n          win && !continued && (\r\n            <div className='modal'>\r\n              <div className='modal_center'>\r\n                <Header as='h2' inverted>Вы победили!</Header>\r\n                <Button.Group>\r\n                <Button\r\n                  inverted\r\n                  color='orange'\r\n                  onClick={() => this.getInitialState()}\r\n                >\r\n                  С начала\r\n                </Button>\r\n                <Button\r\n                  inverted\r\n                  color='olive'\r\n                  onClick={() => {\r\n                      this.setState((state) => ({continued: true}));\r\n                      this.divRef.current.focus();\r\n                    }\r\n                  }\r\n                >\r\n                  Продолжить\r\n                </Button>\r\n                </Button.Group>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n        {\r\n          lose && (\r\n            <div className='modal'>\r\n              <div className='modal_center'>\r\n                <Header as='h2' inverted>Вы проиграли!</Header>\r\n                <Button\r\n                  inverted\r\n                  color='orange'\r\n                  onClick={() => {\r\n                      this.getInitialState();\r\n                    }\r\n                  }\r\n                >\r\n                  С начала\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n      <div style={{textAlign: 'center', marginTop: '10px'}}>\r\n        <Button\r\n          onClick={this.backToPrevState}\r\n          disabled={!prevSquares.length}\r\n        >\r\n          Шаг назад\r\n        </Button>\r\n        <Header color='orange' as='h2'>Your Score: {score}\r\n        <Header.Subheader>Max Score: {maxScore}</Header.Subheader>\r\n        </Header>\r\n      </div>\r\n    </React.Fragment>\r\n    )\r\n  }\r\n\r\n  render(){\r\n      return this.renderBoard();\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport Board from './components/Board';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Board/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}